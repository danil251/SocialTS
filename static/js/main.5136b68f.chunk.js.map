{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Nav/Nav.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Header/Header.tsx","components/Nav/Nav.tsx","components/Profile/MyPosts/Post/Post.tsx","redux/state.ts","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.tsx","components/Dialogs/DialogsItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/News/News.tsx","components/Setting/Setting.tsx","components/Music/Music.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","className","s","header","src","Nav","nav","to","activeClassName","active","Post","props","item","img","alt","message","likeCounts","store","_state","profilePage","posts","id","newPostText","dialogsPage","dialogs","name","messages","newMessageText","_callSubscriber","console","log","subscriber","observer","this","getState","dispatch","action","type","newPost","push","newText","newMessage","MyPosts","postElements","map","post","postsBlok","onChange","e","currentTarget","value","onClick","ProfileInfo","profile","Profile","state","DialogItem","path","dialog","Message","Dialogs","dialogsElements","messageElements","dialogsItem","target","News","Setting","Music","App","render","Boolean","window","location","hostname","match","rerenderEntireTree","ReactDOM","StrictMode","bind","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.5136b68f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__36-Hv\",\"dialogsItem\":\"Dialogs_dialogsItem__3bHbj\",\"dialog\":\"Dialogs_dialog__qlnsz\",\"active\":\"Dialogs_active__ZOlpC\",\"messages\":\"Dialogs_messages__293H0\",\"message\":\"Dialogs_message__dKWJq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__2tfp1\",\"active\":\"Nav_active__2wDzi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyPosts\":\"MyPosts_MyPosts__2KVXN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3Unjl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Fkw4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProfileInfo_profile__24lZN\"};","import React from 'react';\r\nimport s from'./Header.module.css';\r\n\r\n\r\nconst Header = () => {\r\n    return <header className={s.header}>\r\n        <img src=\"/img/logo.png\"></img>\r\n    </header>\r\n}\r\n\r\nexport default Header","import React from 'react';\r\nimport s from './Nav.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n    return <nav className={s.nav}>\r\n\r\n            <NavLink to=\"/Profile\" activeClassName={s.active} >Profile</NavLink>\r\n            <NavLink to=\"/Dialogs\" activeClassName={s.active}>Message</NavLink>\r\n            <NavLink to=\"/Setting\" activeClassName={s.active}>Setting</NavLink>\r\n            <NavLink to=\"/News\" activeClassName={s.active}>News</NavLink>\r\n            <NavLink to=\"/Music\" activeClassName={s.active}>Music</NavLink>\r\n        \r\n    </nav>\r\n}\r\n\r\nexport default Nav","import React from 'react';\r\nimport s from './Post.module.css'\r\n\r\ntype PropsType = {\r\n  message: string,\r\n  likeCounts: number,\r\n  img: string\r\n}\r\n\r\n\r\nconst Post = (props: PropsType) => {\r\n  return <div>\r\n    <div className={s.item}>\r\n      <img src={props.img} alt=\"\"/>\r\n      {props.message}\r\n      <div>\r\n        <span>{props.likeCounts}</span>\r\n      </div>\r\n      </div>\r\n  </div >\r\n}\r\n\r\nexport default Post","// const ADD_POST = 'ADD-POST';\r\n// const UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\r\n// const ADD_MESSAGE = 'ADD-MESSAGE';\r\n// const UPDATE_NEW_MESSAGE_TEXT = 'UPDATE-NEW-MESSAGE-TEXT';\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    likeCounts: number\r\n    img: string\r\n}\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessageText: string\r\n}\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage: DialogsPageType\r\n}\r\nexport type StoreType = {\r\n    _state: RootStateType\r\n    _callSubscriber: any\r\n    subscriber: (callback: (state: RootStateType) => void) => void\r\n    getState: () => RootStateType\r\n    dispatch: (action: ActionsType) => void\r\n}\r\nexport type ActionsType =\r\n    AddPostActionType\r\n    | UpdateNewPostTextActionType\r\n    | AddMessageActionType\r\n    | UpdateNewMessageTextActionType\r\n\r\n\r\nexport type AddPostActionType = {\r\n    type: \"ADD_POST\"\r\n    postText: string\r\n}\r\nexport type UpdateNewPostTextActionType = {\r\n    type: \"UPDATE_NEW_POST_TEXT\"\r\n    newText: string\r\n}\r\nexport type AddMessageActionType = {\r\n    type: \"ADD_MESSAGE\"\r\n    newMessageText: string\r\n}\r\nexport type UpdateNewMessageTextActionType = {\r\n    type: \"UPDATE_NEW_MESSAGE_TEXT\"\r\n    newMessage: string\r\n}\r\n\r\n\r\nlet store: StoreType = {\r\n    _state: {\r\n\r\n        profilePage: {\r\n            posts: [\r\n                {\r\n                    id: 1,\r\n                    message: 'post 1',\r\n                    likeCounts: 4,\r\n                    img: 'https://cs16planet.ru/steam-avatars/images/avatar2700.jpg'\r\n                },\r\n                {\r\n                    id: 1,\r\n                    message: 'post 1',\r\n                    likeCounts: 4,\r\n                    img: 'https://cs16planet.ru/steam-avatars/images/avatar2700.jpg'\r\n                },\r\n                {\r\n                    id: 2,\r\n                    message: 'post 2',\r\n                    likeCounts: 123,\r\n                    img: 'https://klike.net/uploads/posts/2019-03/1551511801_1.jpg'\r\n                }\r\n            ],\r\n            newPostText: ''\r\n        },\r\n        dialogsPage: {\r\n            dialogs: [\r\n                {id: 1, name: 'Viktoria', img: '/img/avatar/avatar1.jpg'},\r\n                {id: 2, name: 'Dmitriy', img: '/img/avatar/avatar2.jpg'},\r\n                {id: 3, name: 'Sasha', img: '/img/avatar/avatar3.jpg'},\r\n                {id: 4, name: 'Nikolay', img: '/img/avatar/avatar4.jpg'},\r\n                {id: 5, name: 'Kris', img: '/img/avatar/avatar5.jpg'}\r\n            ],\r\n            messages: [\r\n                {id: 1, message: 'Привет'},\r\n                {id: 1, message: 'Как ты бро?'},\r\n                {id: 1, message: 'Как ты бро?'},\r\n                {id: 1, message: 'Как ты бро?'},\r\n                {id: 1, message: 'Как ты бро?'},\r\n                {id: 1, message: 'Да все хорошо'}\r\n            ],\r\n            newMessageText: ''\r\n        },\r\n    },\r\n    _callSubscriber() {\r\n        console.log('state changed');\r\n    },\r\n    subscriber(observer: (state: RootStateType) => void) {\r\n        this._callSubscriber = observer;\r\n    },\r\n    getState() {\r\n        return this._state;\r\n    },\r\n\r\n\r\n    dispatch(action: ActionsType) {\r\n\r\n            if (action.type === \"ADD_POST\") {\r\n                let newPost = {\r\n                    id: 5,\r\n                    message: this._state.profilePage.newPostText,\r\n                    likeCounts: 0,\r\n                    img: 'https://cs16planet.ru/steam-avatars/images/avatar2700.jpg'\r\n                };\r\n                this._state.profilePage.posts.push(newPost);\r\n                this._state.profilePage.newPostText = '';\r\n                this._callSubscriber(this._state)\r\n            }\r\n\r\n            else if (action.type === \"UPDATE_NEW_POST_TEXT\") {\r\n                this._state.profilePage.newPostText = action.newText;\r\n                this._callSubscriber(this._state);\r\n            }\r\n\r\n            else if (action.type === \"ADD_MESSAGE\"){\r\n                let newMessage = {\r\n                    id: 5,\r\n                    message: this._state.dialogsPage.newMessageText\r\n                };\r\n                this._state.dialogsPage.messages.push(newMessage);\r\n                this._state.dialogsPage.newMessageText = '';\r\n                this._callSubscriber(this._state);\r\n            }\r\n\r\n            else if (action.type === \"UPDATE_NEW_MESSAGE_TEXT\") {\r\n                this._state.dialogsPage.newMessageText = action.newMessage;\r\n                this._callSubscriber(this._state);\r\n            }\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const addPostAC = () => ({type: 'ADD_POST'});\r\nexport const updateNewPostTextAC = (text: string): UpdateNewPostTextActionType => ({\r\n    type: 'UPDATE_NEW_POST_TEXT',\r\n    newText: text\r\n});\r\nexport const addMessageAC = () => ({type: 'ADD_MESSAGE'});\r\nexport const updateNewMessageTextAC = (text: string): UpdateNewMessageTextActionType => ({\r\n    type: 'UPDATE_NEW_MESSAGE_TEXT',\r\n    newMessage: text\r\n});\r\n\r\n\r\nexport default store;\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {\r\n    ActionsType,\r\n    addPostAC,\r\n    PostsType,\r\n    updateNewPostTextAC,\r\n} from \"../../../redux/state\"\r\n\r\ntype PropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    dispatch: (action: any) =>void\r\n}\r\nfunction MyPosts (props: PropsType) {\r\n\r\n\r\n  let postElements = props.posts.map(post => <Post img={post.img} message={post.message} likeCounts={post.likeCounts} />)\r\n\r\n\r\n\r\n  let addPost = () => {\r\n    props.dispatch( addPostAC() );\r\n\r\n  }\r\n\r\n  let onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n      let post = e.currentTarget.value;\r\n      props.dispatch( updateNewPostTextAC(post) );\r\n      console.log(e.currentTarget.value)\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlok}>\r\n      <h3>My posts</h3>\r\n      <div>\r\n        <div>\r\n          <textarea onChange={onPostChange}  value={props.newPostText} />\r\n        </div>\r\n        <div>\r\n          <button onClick={addPost}>Add post</button>\r\n        </div>\r\n      </div>\r\n      <div className={s.posts}>\r\n        {postElements}\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\nexport default MyPosts\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\nconst ProfileInfo = () => {\r\n  return <div className={s.profile}>\r\n    <img src=\"/img/main-page.jpeg\" alt=\"\" />\r\n  </div>\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport MyPosts from './MyPosts/MyPosts'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {ActionsType, ProfilePageType} from \"../../redux/state\";\r\n\r\ntype PropsType = {\r\n  state: ProfilePageType\r\n  dispatch: (action: ActionsType) =>void\r\n}\r\n\r\nfunction Profile (props: PropsType) {\r\n  return <div>\r\n    <ProfileInfo />\r\n    <MyPosts posts = {props.state.posts} dispatch={props.dispatch}  newPostText = {props.state.newPostText}/>\r\n    \r\n  </div>\r\n}\r\n\r\nexport default Profile","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {DialogsPageType} from \"../../../redux/state\";\r\n\r\ntype PropsType = {\r\n    id: number,\r\n    img: string,\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: PropsType) => {\r\n\r\n    let path = \"/Dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog} >\r\n            \r\n            <NavLink to={path} activeClassName={s.active}><img src={props.img} alt=\"\"/>{props.name}</NavLink>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    message: string,\r\n    id: number,\r\n}\r\n\r\n\r\nconst Message = (props: PropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Message;","import React, {ChangeEvent} from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogsItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport {\r\n    addMessageAC,\r\n    DialogsPageType,\r\n    updateNewMessageTextAC,\r\n\r\n} from \"../../redux/state\"\r\n\r\ntype PropsType = {\r\n    state: DialogsPageType\r\n    dispatch: (action: any) =>void\r\n}\r\n\r\nconst Dialogs = (props: PropsType) => {\r\n\r\nlet dialogsElements = props.state.dialogs.map(dialog => <DialogItem name={dialog.name} id={dialog.id} img={dialog.img} />);\r\n\r\nlet messageElements = props.state.messages.map(message => <Message message={message.message} id={message.id} />);\r\n\r\n\r\n\r\n    let addMessage = () =>{\r\n        props.dispatch( addMessageAC() );\r\n    }\r\n\r\n    let onMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) =>{\r\n        let message = e.target.value;\r\n        props.dispatch( updateNewMessageTextAC(message) );\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                {messageElements}\r\n                <textarea onChange={onMessageChange}  value={props.state.newMessageText} />\r\n                <div>\r\n                <button onClick={addMessage}>Отправить</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport './News.module.css';\r\n\r\n\r\nconst News = () =>{\r\n\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default News;","import React from 'react';\r\nimport './Setting.module.css';\r\n\r\n\r\nconst Setting = () =>{\r\n\r\n    return (\r\n        <div>\r\n            Setting\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Setting;","import React from 'react';\r\nimport './Music.module.css';\r\n\r\n\r\nconst Music = () =>{\r\n\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Music;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport Nav from './components/Nav/Nav';\nimport Profile from './components/Profile/Profile';\nimport Dialogs from './components/Dialogs/Dialogs';\nimport News from './components/News/News';\nimport Setting from './components/Setting/Setting';\nimport Music from './components/Music/Music';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport {ActionsType, RootStateType} from \"./redux/state\";\n\ntype PropsType = {\n    state: RootStateType\n    dispatch: (action: ActionsType) =>void\n}\n\nfunction App (props: PropsType) {\n\n\n  return (\n      <BrowserRouter>\n        <div className='app-wrapper'>\n          <Header />\n          <Nav />\n\n          <div className=\"app-wrapper-content\">\n            <Route path=\"/Profile\" render={ () => <Profile state={props.state.profilePage} dispatch={props.dispatch}  />} />\n            <Route path=\"/Dialogs\" render={ () => <Dialogs state={props.state.dialogsPage} dispatch={props.dispatch} />} />\n            <Route path=\"/Setting\" render={ () => <Setting />} />\n            <Route path=\"/News\" render={ () => <News />} />\n            <Route path=\"/Music\" render={ () => <Music />} />\n          </div>\n        </div >\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store, {RootStateType} from './redux/state';\n\n\n\nlet rerenderEntireTree = (state: RootStateType) => {\n\n    ReactDOM.render(\n        <React.StrictMode>\n                <App state={state} dispatch={store.dispatch.bind(store)}/>\n        </React.StrictMode>, document.getElementById('root'));\n\n}\n    rerenderEntireTree(store.getState());\n    store.subscriber(rerenderEntireTree);\n\n    serviceWorker.unregister();\n\n\n"],"sourceRoot":""}